# Native Python Libraries
import sys
import requests
import json
import re
import base64
import os
import time

# Qt5 Libraries
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QTreeWidgetItem, QApplication, QDesktopWidget, QTreeWidget, QLabel, QWidget, QLineEdit, QPushButton, QGridLayout,\
    QColorDialog, QFontDialog
    
from PyQt5.Qt import QMainWindow, QColor, QIcon, QFont
from HostInfo import HostInfo


# custom lineedit  to clear text on focus
class MyLineEdit(QLineEdit):
    
    def focusInEvent(self, e):
        self.clear()
        super(MyLineEdit,self).focusInEvent(e)

# main app class
class PC(QMainWindow):

    def __init__(self):
        super().__init__()
        
        # the icons as base 64
        self.copy_icon_b64 = b''
        self.refresh_icon_b64 = b'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'
        self.search_icon_b64 = b'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'
        self.prom_icon_b64 = b'iVBORw0KGgoAAAANSUhEUgAAACgAAAAkCAIAAAB0Xu9BAAAAA3NCSVQICAjb4U/gAAAAGXRFWHRTb2Z0d2FyZQBnbm9tZS1zY3JlZW5zaG907wO/PgAAAy5JREFUWIXlV71SrDAUPt57S1I4s8Wyds7s8gCxN2lsXOzdB8CeF9AHgGptNg/AAyz0sJXNxp50NmCjhaSy8RbMMJmQwOp4x+J+FRwO50vId344Oj09hZ/Arx9h/UniP194B2OMMQaA6XT6/PwMAFVVcc7ruv4nxBjjy8tLSilCyOhQlmWWZWmaSilHox0dIi7XdcMwpJSqRinldrtdrVaac1VVjLEsy4Zj/j4+Ph72IISs12vP8zT7/f29EOLi4kKzI4QIIfP5/OHh4f393RZ2RFyr1SqKIuO33e/3ZVl2t9oBU0o3m43jOF8h9n0/DEPNKIToLuq6LooCAIqiqKpK8/Q8b4DbSrxYLG5vb/v2OI47bgDY7XYAwBhrmqbv7Hlef+kjxHEcG+1N02RZxjlvb9M0BQAhRLuCPq6urgghhxL7vu+6bt9e17UQoixLlYYxBgB5ntuyyLhpM3EQBEZ7nucA0DTNdrtVVwMAUkrbR5rNZr7vjxMvFgvjdgGgzU4hhLq5/X6vLsuI8/PzceLlcml7X5VVhy6RpJTd2WtoS+wIcb9WtLAFVWHUNgAghDRuA7GtFH8vzGdsdLXZVcxmM9uj8R1r6HSEEOqLU4Xrut3iRhuUoS3Wda2q+u3tjRCCMfY8bz6fD8SilDLGOOdlWVJKtcKnScRAXFWVStxmYZqmo+JKkqS7tlWCDoZPrfacFmEY2jLbCKO/Ftaw491up7V3hFAURbZqrMFxnP50UBSFduoGYs65lFJrZycnJ/0iYIQxGx8fHzWLeeZKkkQ7pLIsb25uDiHGGG82G9XSDkmamzmdkiT51Mg4jDiO+9llHfYIIVEUdbdN0/RFZwRCSC26Qoj+kQ8RA0AQBP2sEEK0444Go6aklMvl0lhMhuZqxpjrulq1+vj4aDu/BkKIRiylDILAVsJGxts2hVQ9TyaTdg5R3RzH0YZRIUQQBE9PT7bI43M155xzfnZ21sVtx+aXlxcA8DwPY7xeryeTSfdKkiR3d3evr68DYQ/6k2jh+/719fVAj5JS5nnOGDskIz5B3MJ1XUrpdDrtpNs0jRDCJrpvI/4u/H8/5n8BoqKF2jatIZcAAAAASUVORK5CYII='
        self.color_icon_b64 = b''
        self.text_icon_b64 = b'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'


        # the variables
        self.search_type = None
        self.search_criteria = None
        self.tree = QTreeWidget()
        self.status = QLabel()
        
        self.version = 2.9
        self.out = ""
        
       
        
        #container for the alerts
        self.alert_list_external = QTreeWidgetItem(["External Alert"])
        self.alert_list_internal = QTreeWidgetItem(["Internal Alert"])
        
        
        #search variables
        self.lbl_account = QLabel()
        self.lbl_account.setAlignment(Qt.AlignLeft)
        self.lbl_host = QLabel()
        self.lbl_host.setAlignment(Qt.AlignLeft)
        self.lbl_exporter = QLabel()
        self.lbl_exporter.setAlignment(Qt.AlignLeft)
        self.lbl_uid = QLabel()
        self.lbl_uid.setAlignment(Qt.AlignLeft)
        self.lbl_location = QLabel()
        self.lbl_location.setAlignment(Qt.AlignLeft)
        
        self.lbl_account_lbl = QLabel("Account:")
        self.lbl_account_lbl.setAlignment(Qt.AlignRight)
        self.lbl_host_lbl = QLabel("Host:")
        self.lbl_host_lbl.setAlignment(Qt.AlignRight)
        self.lbl_exporter_lbl = QLabel("IP:")
        self.lbl_exporter_lbl.setAlignment(Qt.AlignRight)
        self.lbl_uid_lbl = QLabel("UID:")
        self.lbl_uid_lbl.setAlignment(Qt.AlignRight)
        self.lbl_location_lbl = QLabel("Location:")
        self.lbl_location_lbl.setAlignment(Qt.AlignRight)
        
        
        
        # search criteria
        self.txt_search = MyLineEdit()
        
        # search button
        self.btn_search_alerts = QPushButton()
        self.btn_refresh = QPushButton()
        
        
        # copy button
        self.btn_copy_info = QPushButton()
        self.decode_icon(self.copy_icon_b64,self.btn_copy_info)
        
        #container for all the search info for iterating
        self.info = []
        
        self.cwidget = QWidget(self)
        self.lay = QGridLayout()
        self.lay.setAlignment(Qt.AlignTop)
        #self.lay.setSpacing(10)
        self.cwidget.setLayout(self.lay)
        self.setCentralWidget(self.cwidget)
        
        self.btn_color_picker = QPushButton()
        self.btn_txt_picker = QPushButton()
        self.color_dialog = QColorDialog(self)
        self.font_family = QFont("FreeMono")
        self.font_color = QColor(0,0,0)
        self.background_color = QColor(110,110,110)
        self.setFont(self.font_family)

            
        # setting window icon
        tmp_file = open("tmp.png",'wb')
        tmp_file.write(base64.b64decode(self.prom_icon_b64))
        tmp_file.close()
        
        self.setWindowIcon(QIcon("tmp.png"))
        os.remove("tmp.png")
        
        self.setStyleSheet("background-color: rgb"+str(self.background_color.getRgb()))
        
        # Start UI
        self.initUI()


    def decode_icon(self,icon,widget):
        tmp_file = open("tmp.png",'wb')
        tmp_file.write(base64.b64decode(icon))
        tmp_file.close()
        widget.setIcon(QIcon("tmp.png"))
        os.remove("tmp.png")
                        
                        
    def initUI(self):
        
       
        # checking available version
        self.versionCheck()
        
        # setting up the tree widget
        self.tree.setHeaderLabels(["","",""])
        self.tree.setColumnWidth(0,125)
        #self.tree.setAlternatingRowColors(True)
        
        self.decode_icon(self.color_icon_b64,self.btn_color_picker)
        self.btn_color_picker.clicked.connect(self.pickColor)
        
        self.decode_icon(self.text_icon_b64,self.btn_txt_picker)
        self.btn_txt_picker.clicked.connect(self.pickText)
        
    
        #adding variables to search iterator
        self.info.append(self.lbl_account)
        self.info.append(self.lbl_host)
        self.info.append(self.lbl_exporter)
        self.info.append(self.lbl_uid)
        self.info.append(self.lbl_location)
        
        
        # setting up the search button
        self.btn_search_alerts.setShortcut(self.tr("Return"))
        self.btn_search_alerts.setShortcut(self.tr("Enter"))
        self.btn_search_alerts.clicked.connect(self.searchPrometheus)

        # setting up the copy info button
        self.btn_copy_info.clicked.connect(self.copyInfo)
        self.btn_refresh.clicked.connect(self.refreshThings)
        
        self.decode_icon(self.search_icon_b64,self.btn_search_alerts)
        self.decode_icon(self.refresh_icon_b64,self.btn_refresh)

        self.btn_search_alerts.setFixedWidth(40)
        self.btn_copy_info.setFixedWidth(40)
        self.btn_refresh.setFixedWidth(40)
        
        # adding widgets to current layout
        self.lay.addWidget(self.txt_search, 0,0,1,3)
        self.lay.addWidget(self.btn_search_alerts, 0,3)
        
        # label headers for server info
        self.lay.addWidget(self.lbl_account_lbl,1,0)
        self.lay.addWidget(self.lbl_account,1,1)
        
        self.lay.addWidget(self.lbl_uid_lbl,1,2)
        self.lay.addWidget(self.lbl_uid,1,3,1,2)
        
        self.lay.addWidget(self.lbl_host_lbl,3,0)
        self.lay.addWidget(self.lbl_host,3,1,1,3)
        
        self.lay.addWidget(self.lbl_exporter_lbl,2,0)
        self.lay.addWidget(self.lbl_exporter,2,1)
        
        self.lay.addWidget(self.lbl_location_lbl,2,2)
        self.lay.addWidget(self.lbl_location,2,3,1,2)
               
        
        self.lay.addWidget(self.btn_copy_info,0,4)
        self.lay.addWidget(self.tree,5,0,1,5)
        self.lay.addWidget(self.status,6,0,1,2)
        self.lay.addWidget(self.btn_refresh,6,2)
        self.lay.addWidget(self.btn_color_picker,6,3)
        self.lay.addWidget(self.btn_txt_picker,6,4)
        
        # make all the search info selectable
        for i in self.info:
            i.setTextInteractionFlags(Qt.TextSelectableByMouse)

        # setting up the main window
        self.setGeometry(300, 300, 370, 350)
        self.setWindowTitle('Prometheus Alert Check')
        self.center(self)
        self.show()
        
    def openLink(self):
        print("CLICKED")
    
    def pickText(self):
        self.font_family, ok = QFontDialog.getFont(self.font_family)
        self.font_color = self.color_dialog.getColor(self.font_color)
        if self.font_color.isValid():
            self.lbl_account_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_account_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_host_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_exporter_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_uid_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_location_lbl.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_account.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_host.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_exporter.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_uid.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.lbl_location.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.status.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.txt_search.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            self.tree.setStyleSheet("color: rgba"+str(self.font_color.getRgb()))
            
            
            if self.lbl_account.text().find("href") >= 0:
                self.lbl_account.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\""+self.lbl_account.text()[self.lbl_account.text().find("href"):])
                self.lbl_host.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\""+self.lbl_host.text()[self.lbl_host.text().find("href"):])
                self.lbl_uid.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\""+self.lbl_uid.text()[self.lbl_uid.text().find("href"):])
                
                if self.status.setText.find("<a"):
                    self.status.setText(self.status.text()[:self.status.text().find("<")]+"<a style=\"color: rgba"+str(self.font_color.getRgb())+"\""+self.status.text()[self.status.text().find("href"):])
                else:
                    self.status.setText(self.status.text()[:self.status.text().find("<")])
                
            
        if ok:
            self.lbl_account_lbl.setFont(self.font_family)
            self.lbl_host_lbl.setFont(self.font_family)
            self.lbl_exporter_lbl.setFont(self.font_family)
            self.lbl_uid_lbl.setFont(self.font_family)
            self.lbl_location_lbl.setFont(self.font_family)
            self.lbl_account.setFont(self.font_family)
            self.lbl_host.setFont(self.font_family)
            self.lbl_exporter.setFont(self.font_family)
            self.lbl_uid.setFont(self.font_family)
            self.lbl_location.setFont(self.font_family)
            self.status.setFont(self.font_family)
            self.txt_search.setFont(self.font_family)
            self.tree.setFont(self.font_family)
            
    def pickColor(self):
        self.color_dialog.setOption(QColorDialog.NoButtons)
        self.background_color = self.color_dialog.getColor(self.background_color)
        if self.background_color.isValid():
            self.setStyleSheet("background-color: rgba"+str(self.background_color.getRgb()))
        
        
    # copy current search info
    def copyInfo(self):
        QApplication.clipboard().setText(self.lbl_host.text()[self.lbl_host.text().find(" ")+1:] +" ["+self.lbl_uid.text()[self.lbl_uid.text().find(" ")+1:]+"]\n"+self.lbl_location.text()[self.lbl_location.text().find(" ")+1:]+" ["+self.lbl_exporter.text()[self.lbl_exporter.text().find(" ")+1:]+"]")

    # center the main app window on whatever screen the mouse is on
    def center(self,win):
        frame = win.frameGeometry()
        screen = QDesktopWidget().screenNumber(QApplication.desktop().cursor().pos())
        frame.moveCenter(QDesktopWidget().screenGeometry(screen).center())
        win.move(frame.topLeft())

    # check for newer versions on gitlab
    # def versionCheck(self):
    #     version = requests.get("https://git.liquidweb.com/dmcdermitt/myprojects/raw/master/PrometheusChecker%20(PC)/version.info")
    #     if version.text == str(self.version):
    #         self.status.setText("Version: "+ str(self.version) + " Up to date.")
    #     else:
    #         self.status.setOpenExternalLinks(True)
    #         self.status.setTextFormat(Qt.RichText)
    #         self.status.setTextInteractionFlags(Qt.TextBrowserInteraction)
	# 
    #         self.status.setText("Version: "+ str(self.version) + " Out of date. <a style=\"color: rgba"+str(self.font_color.getRgb())+"\" href=\"https://drive.google.com/drive/u/0/folders/1BXCB7Pywmtr12G-GMqnOs8MoXENYTLrk\" >" + version.text +"</a> available.")
    
    def refreshThings(self):
        self.versionCheck()
        self.searchPrometheus()
        
    # clear search
    def clearSearch(self):
        self.txt_search.clear()
        
    # clear info
    def clearInfo(self):
        # clear all the search info
        for i in self.info:
            i.clear()
            
        for i in self.alert_list_external.takeChildren():
            self.alert_list_external.removeChild(i)

        for i in self.alert_list_internal.takeChildren():
            self.alert_list_internal.removeChild(i)

        for top in range(0,self.tree.topLevelItemCount()):
            self.tree.takeTopLevelItem(top)
            
       
    # searching prometheus for monitored services on server
    def searchPrometheus(self):
        self.tree.setColumnCount(3)
        self.clearInfo()   
               
        self.lbl_location_lbl.setHidden(False)
        self.lbl_exporter_lbl.setHidden(False)
        self.lbl_account_lbl.setText("Account:")
        
        # setup the search criteria and ip for prometheus 
        source_ips = ["10.30.9.87"]#"10.20.9.24","10.30.9.156","10.41.9.14","10.50.9.17","10.30.9.68","10.30.9.135","10.30.9.124", "10.20.9.25","10.30.9.157","10.41.9.15","10.50.9.18","10.30.9.69","10.30.9.136","10.30.9.125"]
        query_type = ""
        search = self.txt_search.text().strip()
        search_by = ""

        if search.find("gb") >= 0 or search.find("guard") >= 0:
            if len(search) == 6:
                search_by = "uniq_id"
            elif  re.sub("\.","",search).isdigit() and len(search) > 6:
                search_by = "policy_description"
            else:
                search_by = "instance"
            
            query_type = "ALERTS"    
                
        else:  
            if len(search) == 6:
                search_by = "uniq_id"
            elif  re.sub("\.","",search).isdigit() and len(search) > 6:
                search_by = "instance"
            else:
                search_by = "Hostname"
            
            query_type = "probe_success"
    
    
        if search_by == "instance":
            api_search = "/api/v1/query?query="+query_type+"{"+search_by+"=\""+search+"\"} or probe_success{"+search_by+"=~\""+search+":.*\"}"
        else:
            api_search = "/api/v1/query?query="+query_type+"{"+search_by+"=\""+search+"\"}"
       
            

        # set local variables for iterating through json results from search
        found = False
        node = []
        red = QColor(200,0,0)
        green = QColor(0,200,0)
        set_color = green
        ip = ""
        ext_hdr_added = False
        int_hdr_added = False
        self.out = ""
        # check if there is anything  the search textbox
        if len(self.txt_search.text().strip()) > 0:
            for pro_ip in source_ips:
                                  
                # send query and get results from prometheus
                self.out = json.loads(requests.get("http://"+pro_ip+":9090"+api_search, headers={'Cache-Control': 'no-cache'}).text)
                
                # check if we get any results
                if len(self.out['data']['result']) > 0 and query_type == "probe_success":
                                  
                    # set server info lbl's
                    try :
                        self.lbl_account.setText(self.out['data']['result'][0]['metric']['Account'])
                        self.lbl_host.setText(self.out['data']['result'][0]['metric']['Hostname'])
                        self.lbl_uid.setText(self.out['data']['result'][0]['metric']['uniq_id'])
                        self.lbl_location.setText(self.out['data']['result'][0]['metric']['Location'])
                    except:
                        pass
    
                    # parse through the json results for monitoring nodes and set ip lbl
                    for k in range(0,len(self.out['data']['result'])):
                        if str(self.out['data']['result'][k]['metric']['bb_exporter']).find("n") >= 0: 
                            if not ext_hdr_added:
                                self.tree.addTopLevelItem(self.alert_list_external)
                                ext_hdr_added = True
        
                            ip = self.out['data']['result'][k]['metric']['instance']
                            ip = ip[:ip.find(':')]
                            self.alert_list_internal.setText(1,ip)
                            
                            self.lbl_exporter.setText(ip)
                            
                            possible_node = (str(self.out['data']['result'][k]['metric']['bb_exporter'])[:6])
                            
                            try:
                                node.index(possible_node)
                            except:
                                node.append(possible_node)
                                                
                        
                    # setup the tree headers based on monitoring nodes
                    for nodes in range(len(node)):
                        self.alert_list_external.setText(nodes+1,node[nodes])
                        
                    # parse json results and place into appropriate tree                    
                    for k in range(0,len(self.out['data']['result'])):
                        alerting_service = str(self.out['data']['result'][k]['metric']['job'])
    
                        alerting_service = alerting_service[alerting_service.find("_")+1:]
                        alerting_service = alerting_service[alerting_service.find("_")+1:]
    
                        alert_status = ""
                        if self.out['data']['result'][k]['value'][1] == "1":
                            alert_status = "Up"
                            set_color = green
                        else:
                            alert_status = "Down"
                            set_color = red
                            
                        # if the node exists in the monitoring nodes lets add it 
                        try:
                            m = node.index(str(self.out['data']['result'][k]['metric']['bb_exporter'])[:6])
                            
                            #print(str(self.out['data']['result'][k]['metric']['job']) + " " + str(self.out['data']['result'][k]['metric']['bb_exporter'])[:6]  +  " I: "+ str(m)) 
                            
                            if (str(self.out['data']['result'][k]['metric']['job']).find("external") >= 0):
                                
                                for i in range(self.alert_list_external.childCount()):
                                    if self.alert_list_external.child(i).text(0) == alerting_service:
                                        found = True
                                        self.alert_list_external.child(i).setText(m+1,alert_status)
                                        self.alert_list_external.child(i).setBackground(m+1,set_color)
                            
                            
                                if not found:
                                    self.alert_list_external.addChild(QTreeWidgetItem([alerting_service,""]))
                                    self.alert_list_external.child(self.alert_list_external.childCount()-1).setText(m+1,alert_status)
                                    self.alert_list_external.child(self.alert_list_external.childCount()-1).setBackground(m+1,set_color)
                                
                                found = False
                            
                        except:
                            pass
                        
                        # internal monitoring is based on server IP lets add if it exists
                        if (str(self.out['data']['result'][k]['metric']['job']).find("internal") >= 0):                             
                            for i in range(self.alert_list_internal.childCount()):
                                if self.alert_list_internal.child(i).text(0) == alerting_service:
                                    found = True
                            
                            if not found:
                                self.alert_list_internal.addChild(QTreeWidgetItem([alerting_service,""]))
                                self.alert_list_internal.child(self.alert_list_internal.childCount()-1).setText(1,alert_status)
                                self.alert_list_internal.child(self.alert_list_internal.childCount()-1).setBackground(1,set_color)
                            
                            found = False     

        
                else:
                    query_type = "ALERTS" 
                    
                    if  re.sub("\.","",search).isdigit() and len(search) > 6:
                        search_by = "policy_description"
                        
                    if search_by == "instance":
                        api_search = "/api/v1/query?query="+query_type+"{"+search_by+"=\""+search+"\"} or probe_success{"+search_by+"=~\""+search+":.*\"}"
                    else:
                        api_search = "/api/v1/query?query="+query_type+"{"+search_by+"=\""+search+"\"}"
                        
                    self.out = json.loads(requests.get("http://"+pro_ip+":9090"+api_search, headers={'Cache-Control': 'no-cache'}).text)
                    # set server info lbl's
                    try :
                        self.lbl_location_lbl.setHidden(True)
                        self.lbl_account_lbl.setText("GUID:")
                        tmpStr = self.out['data']['result'][0]['metric']['instance']
                        uid = self.out['data']['result'][0]['metric']['disksafe_description']
                        

                        self.lbl_host.setOpenExternalLinks(True)
                        self.lbl_host.setTextFormat(Qt.RichText)
                        self.lbl_host.setTextInteractionFlags(Qt.TextBrowserInteraction)
                        
                        self.lbl_account.setOpenExternalLinks(True)
                        self.lbl_account.setTextFormat(Qt.RichText)
                        self.lbl_account.setTextInteractionFlags(Qt.TextBrowserInteraction)
                        
                        self.lbl_uid.setOpenExternalLinks(True)
                        self.lbl_uid.setTextFormat(Qt.RichText)
                        self.lbl_uid.setTextInteractionFlags(Qt.TextBrowserInteraction)
                        
                        self.lbl_account.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\"  href=\"https://billing.int.liquidweb.com/mysql/content/admin/search.mhtml?search_submit=Search&search_input="+self.out['data']['result'][0]['metric']['uniq_id']+"\" >"+self.out['data']['result'][0]['metric']['uniq_id']+"</a>")
                        self.lbl_host.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\"  href=\"https://"+tmpStr[:tmpStr.find(":")]+"/Agent\" >"+tmpStr[:tmpStr.find(":")]+"</a>")
                        self.lbl_uid.setText("<a style=\"color: rgba"+str(self.font_color.getRgb())+"\"  href=\"https://billing.int.liquidweb.com/mysql/content/admin/search.mhtml?search_submit=Search&search_input="+uid+"\" >"+uid+"</a>")
                        #self.lbl_exporter.setText(self.out['data']['result'][0]['metric']['policy_description'])
                        self.lbl_exporter_lbl.setHidden(True)
                    except:
                        pass
    
                   
                    policy_level = []
                    bm_level = []
                    
                    self.tree.addTopLevelItem(self.alert_list_external)   
                    # parse json results and place into appropriate tree                    
                    for k in range(0,len(self.out['data']['result'])):
                        alerting_service = str(self.out['data']['result'][k]['metric']['alertname'])
                        set_color = red
                        
       
                        # if the node exists in the monitoring nodes lets add it 
                        try:
                            tempHost = HostInfo()
                            tempHost.backupManager = self.out['data']['result'][k]['metric']['hostname']
                            tempHost.ip = self.out['data']['result'][k]['metric']['policy_description']
                            tempHost.alert = alerting_service
                            tempHost.alertColor = set_color
                            policy_level.append(tempHost)
                            
                        except:
                            pass
   
                        
                    tempIpList = []      
                    tempBMList = []                          
                    for items in policy_level:
                        try:
                            tempBMList.index(items.backupManager)
                        except:
                            tempBMList.append(items.backupManager)
                            self.alert_list_external.addChild(QTreeWidgetItem([items.backupManager]))
                        
                        try:
                            tempIpList.index(items.ip)
                            
                        except:
                            tempIpList.append(items.ip)
                            self.alert_list_external.child(tempBMList.index(items.backupManager)).addChild(QTreeWidgetItem([items.ip]))
                        
                        
                        self.alert_list_external.child(tempBMList.index(items.backupManager)).child(tempIpList.index(items.ip)).addChild(QTreeWidgetItem([items.alert]))
                        self.alert_list_external.child(tempBMList.index(items.backupManager)).setExpanded(True)
                        self.alert_list_external.child(tempBMList.index(items.backupManager)).child(tempIpList.index(items.ip)).setExpanded(True)
                        childCount = self.alert_list_external.child(tempBMList.index(items.backupManager)).child(tempIpList.index(items.ip)).childCount()
                        self.alert_list_external.child(tempBMList.index(items.backupManager)).child(tempIpList.index(items.ip)).child(childCount-1).setBackground(0,set_color)
                    
                    #items.setExpanded(True)
                        
                    self.tree.setColumnCount(1)
                    if self.alert_list_external.childCount() ==  0:
                        self.tree.setColumnCount(1)
                        self.alert_list_external.addChild(QTreeWidgetItem(["No Results"]))
                        self.alert_list_external.addChild(QTreeWidgetItem(["Note: Can't use Guard host name."]))
                        
 
                
        if (self.alert_list_external.childCount() > 0):
            self.tree.addTopLevelItem(self.alert_list_external)
            self.alert_list_external.setExpanded(True)
        
        if (self.alert_list_internal.childCount() > 0):
            self.tree.addTopLevelItem(self.alert_list_internal)
            


# start the main application up
if __name__ == '__main__':

    app = QApplication(sys.argv)
    pc = PC()
    sys.exit(app.exec_())
